import { app, BrowserWindow, ipcMain, Menu } from 'electron';
import { get_all_notes, set_note, delete_note, get_note } from './database/db';
import { INoteData } from './shared/types';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const CHILD_WINDOW_WEBPACK_ENTRY: string;
declare const CHILD_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}



let mainWindow: BrowserWindow;
const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    frame: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  /**
   * Mac - darwin
   * windows - win32
   * linux - linux
   */

  process.platform == 'darwin' && mainWindow.setWindowButtonVisibility(true);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  get_all_notes((data: INoteData) => {
    console.log("all notes", data);
    mainWindow.webContents.send('onstart-notes-data', data)
  })


  ipcMain.handle('delete-note', async (ev, note_id) => {
    return await new Promise((res, rej) => {
      delete_note(note_id, (data: string) => {
        console.log("all notes", data);
        res(data)
      })
    })
  })

  ipcMain.handle('fetch-all-notes', async (ev, argz) => {
    return await new Promise((res, rej) => {
      get_all_notes((data: INoteData) => {
        console.log("all notes", data);
        res(data)
      })
    })
  })

  ipcMain.on('close-app', (ev, argz) => {
    mainWindow.close()
  })

  ipcMain.on('maximize-app', (ev, argz) => {
    mainWindow.isMaximized() ? mainWindow.unmaximize() : mainWindow.maximize()
  })

  ipcMain.on('minimize-app', (ev, argz) => {
    mainWindow.minimize()
  })

  

  ipcMain.handle('set-note', async (ev, argz) => {
    // ev.sender.send()
    return await new Promise((res, rej) => {
      set_note(argz, (data: any) => {
        res(data);
      })
    })
  })
};

const isMac = process.platform === 'darwin'

const template = [
  // { role: 'appMenu' }
  ...(isMac
    ? [{
        label: app.name,
        submenu: [
          { role: 'about' },
          { type: 'separator' },
          { role: 'services' },
          { type: 'separator' },
          { role: 'hide' },
          { role: 'hideOthers' },
          { role: 'unhide' },
          { type: 'separator' },
          { role: 'quit' }
        ]
      }]
    : []),
  // { role: 'fileMenu' }
  {
    label: 'File',
    submenu: [
      {label: "New note", click: () => {
        const dummy_data = {
                    id: null,
                    note: '{}'
              } as INoteData
        set_note(dummy_data, (data: any) => {
          mainWindow.webContents.send('update-notes-data', data);
        })
      }},
      isMac ? { role: 'close' } : { role: 'quit' },
    ]
  },
  // { role: 'editMenu' }
  {
    label: 'Edit',
    submenu: [
      { role: 'undo' },
      { role: 'redo' },
      { type: 'separator' },
      { role: 'cut' },
      { role: 'copy' },
      { role: 'paste' },
      ...(isMac
        ? [
            { role: 'pasteAndMatchStyle' },
            { role: 'delete' },
            { role: 'selectAll' },
            { type: 'separator' },
            {
              label: 'Speech',
              submenu: [
                { role: 'startSpeaking' },
                { role: 'stopSpeaking' }
              ]
            }
          ]
        : [
            { role: 'delete' },
            { type: 'separator' },
            { role: 'selectAll' }
          ])
    ]
  },
  // { role: 'viewMenu' }
  {
    label: 'View',
    submenu: [
      { role: 'reload' },
      { role: 'forceReload' },
      { role: 'toggleDevTools' },
      { type: 'separator' },
      { role: 'resetZoom' },
      { role: 'zoomIn' },
      { role: 'zoomOut' },
      { type: 'separator' },
      { role: 'togglefullscreen' }
    ]
  },
  // { role: 'windowMenu' }
  {
    label: 'Window',
    submenu: [
      { role: 'minimize' },
      { role: 'zoom' },
      ...(isMac
        ? [
            { type: 'separator' },
            { role: 'front' },
            { type: 'separator' },
            { role: 'window' }
          ]
        : [
            { role: 'close' }
          ])
    ]
  },
  {
    role: 'help',
    submenu: [
      {
        label: 'Learn More',
        click: async () => {
          const { shell } = require('electron')
          await shell.openExternal('https://electronjs.org')
        }
      }
    ]
  }
] as any

const menu = Menu.buildFromTemplate(template)
Menu.setApplicationMenu(menu)


ipcMain.handle('get-note', async (ev, argz) => {
  return await new Promise((res, rej) => {
    get_note(argz, (data: any) => {
      console.log("all notes", data);
      res(data)
    })
  })
})

ipcMain.on('open-note-in-child-process', (note_id) => {
  console.log("note_idnote_id will", note_id);
  
  const childWindow = new BrowserWindow({
    height: 450,
    width: 450,
    frame: false,
    webPreferences: {
      preload: CHILD_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })
  childWindow.loadURL(CHILD_WINDOW_WEBPACK_ENTRY+"?note_id="+note_id);
})

ipcMain.on('open_note_item_context_menu', (ev, note_id) => {
  const template = [
    {
      label: 'Open in a new window',
      click: () => { 
        console.log("note id", note_id);
        
        ipcMain.emit('open-note-in-child-process', note_id)
      }
    },
    { type: 'separator' },
    { label: 'Delete', click: () => {
      delete_note(note_id, (data: string) => {
        console.log("all notes", data);
        ev.sender.send('update-notes-data', data)
      })
    } }
  ] as any
  const menu = Menu.buildFromTemplate(template)
  menu.popup({ window: BrowserWindow.fromWebContents(ev.sender) })
})

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
